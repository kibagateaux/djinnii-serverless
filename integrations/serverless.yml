# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
service: jinni-integrations # NOTE: update this with your service name

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev


package:
  exclude: 
    - .git/**
    - srcES7/**
    - tests/**
    - yarn.lock
    - .babelrc

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
  - Effect: Allow
    Resource: "*"
    Action:
      - dynamodb: "*" # FIXME: all IAM roles should be at function level
      - lambda: "*"
  #    Action:
  #      - "s3:ListBucket"
  #    Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #  - Effect: "Allow"
  #    Action:
  #      - "s3:PutObject"
  #    Resource:
  #      Fn::Join:
  #        - ""
  #        - - "arn:aws:s3:::"
  #          - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
#package:
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:

  handleMovesOAuth:
    handler: src/services/movesService.handleMovesOAuth
    description: Handles authorization process for Moves app
    tags:
      runtime: nodejs6.10
      service: integrations      
    environment:
      MOVES_CLIENT_SECRET: ctvltqaFM1y6BaEe1IdE7_c7St82X6sHmIuD4597QAQr4zl930o23F8mnF3t7NEn
      MOVES_CLIENT_ID: kdiz90L264WQ72Sc7OO0_0IUM4ZRrcB6
    events:
      - http:
          path: /auth/moves
          method: get
          integration: lambda
          cors: true
          request:
            parameters:
              querystrings:
                code: true
                state: true

  updateOAuthTokens: 
    handler: src/services/general.updateOAuthTokens
    description: Updates user's oauth tokens for an integration in user meta data table
    tags:
      runtime: nodejs6.10
      service: integrations
    environment:
      DYNAMO_USER_TABLE: djinii-mobilehub-1897344653-User_Meta_Data
    events:
      - http:
          path: /updateTokens
          method: post
          

  getMovesStorylineData:
    handler: src/services/movesService.getMovesStorylineData
    description: Uses stored access_key in database to pull new data from Moves App and update database activities, locations, and stats
    tags:
      runtime: nodejs6.10
      service: integrations
    environment:
      DYNAMODB_META_DATA_TABLE: djinii-mobilehub-1897344653-User_Meta_Data
      DYNAMODB_ACTIVITIES_TABLE: djinii-mobilehub-1897344653-Activities
      DYNAMODB_LOCATIONS_TABLE: djinii-mobilehub-1897344653-Locations
      MOVES_CLIENT_ID: kdiz90L264WQ72Sc7OO0_0IUM4ZRrcB6
    events:
      - http:
          path: /moves/storyline/{userId}
          method: get
          request:
            parameters:
              paths:
                userId: true

  updateAllDataSources:
    handler: handler.general.updateAllDataSources
    description: Checks all available data integrations for a user and fetches data to update database
    tags:
      runtime: nodejs6.10
      service: integrations
    environment:
      DYNAMODB_TOKENS_TABLE: djinii-mobilehub-1897344653-Tokens
    events: 
      - http:
          path: /user/update-all-data/{userId}
          method: get
          request:
            parameters:
              paths:
                userId: true

  dataIntegrationsAggregator:
    handler: handler.general.dataIntegrationsAggregator
    description: Checks all available data integrations for a user and fetches data to update database
    tags:
      runtime: nodejs6.10
      service: integrations
    events: 
      - http:
          path: /user/aggregate-data/
          method: post

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
